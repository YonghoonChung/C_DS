트리
    데이터 사이의 계층구조를 나타내는 자료구조
    비선형 자료구조

    노드 : 각각의 단위
    가지 : 노드와 노드를 연결하는 것
    계층 : level, 수준은 나타낸다
        root node: level 0
            부모가 없는 노드
        부모노드 자식노드 관계 중요
        leaf node : 자식이 없는 노드

        sibling node : 같은 부모를 공유

    서브트리: 메인 트리에서 부분을 띄었을 때 트리가 구성되는 구조

    안쪽노드 : 리프 제외, 루트를 포함한 모든 노드

    차수 : 하나의 부모에서 자식수가 제일 많은 것을 기준단다 (n진트리)

BFS (너비 우선트리) : 레벨단위로 왼쪽부터 오른쪽까지 순차적으로 탐색
DFS (깊이 우선트리) :
    1. 전위순회(preorder) : 노드방문 먼저 (부모가 처음에 출력)
        노드방문 -> 왼쪽자식 -> 오른쪽자식
    2. 중위순회(inorder) : 노드방문 중간
        왼쪽자식 -> 노드방문 -> 오른쪽자식
    3. 휘위순회(postorder) : 노드방문 마지막(즉, 부모가 마지막에 출력)
        왼쪽자식 -> 오른쪽자식 -> 노드방문

이진검색트리/이진탐색트리/이진트리
    이진트리에서 다음을 만족
        1. n을 기준으로 왼쪽 서브트리 노드의 모든 값은 노드 N의 값보다 작다
        2. 오른쪽 서브 트리 노드의 값은 노드 N의 값보다 커야한다
        3. 같은 값의 노드는 존재하지 않는다.

    중위순회트리시 -> 오른차순으로 값을 탐색가능

    검색시, 시간 비용을 아낄수 있다.
        순차탐색이 아닌 이진탐색으로 실행하기 때문이다.

    이진트리이면서 왼쪽 노드들은 본인보다 작은 값을, 오른쪽 노드들은 본인보다 높은 값을, 중복된 값은 저장이 되지 않는 트리

     데이터 추가
        1. 트리에 노드가 없다면 추가하고자 하는 데이터가 root가 된다.
        2. 트리에 동일한 데이터가 있다면 추가 실패
        3-1. 추가하고자 하는 데이터가 현재 노드의 데이터보다 크다면 오른쪽 자식 노드에서 추가를 실행한다.
        3-2. 추가하고자 하는 데이터가 현재 노드의 데이터보다 작다면 왼쪽 자식 노드에서 추가를 실행한다.

    